<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lifetime blog]]></title>
  <link href="http://yoihito.github.io/atom.xml" rel="self"/>
  <link href="http://yoihito.github.io/"/>
  <updated>2015-03-26T20:37:32+03:00</updated>
  <id>http://yoihito.github.io/</id>
  <author>
    <name><![CDATA[Vadim Gribanov]]></name>
    <email><![CDATA[gribanov.vadim.e@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Manage Frontend Stuff on Node.js With Webpack]]></title>
    <link href="http://yoihito.github.io/blog/2015/03/16/how-to-build-assets-pipeline-with-webpack/"/>
    <updated>2015-03-16T17:15:49+03:00</updated>
    <id>http://yoihito.github.io/blog/2015/03/16/how-to-build-assets-pipeline-with-webpack</id>
    <content type="html"><![CDATA[<p>Hey! I decided to make full-stack node.js application to get experience with this tech stack. I got in troubles with managing frontend stuff like javascripts, styles and etc.</p>

<h2>Problem</h2>

<p>The most naive way is to use inline includes in html template. It looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="jquery.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="react.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="foo.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;link rel="stylesheet" href="jquery-ui.css"&gt;
</span><span class='line'>&lt;link rel="stylesheet" href="style.css"&gt;</span></code></pre></td></tr></table></div></figure>


<p>This solution has several pros:</p>

<ol>
<li>It&rsquo;s uncomfortable to maintain dependencies.</li>
<li>When you use a lot of scipts and styles it takes much time to load all this stuff in browser.</li>
<li>You remember about cache expiration.</li>
</ol>


<!-- more -->


<h2>Solution</h2>

<p>I have a lot of experience in Ruby on Rails development. This framework have a lot of cool features and tools. Assets pipeline is among them.
It has such features as fingerprinting, assets concantenation, assets compession and minification and so on(<a href="http://guides.rubyonrails.org/asset_pipeline.html">more information</a>). I made up my mind to implement this solution on Node.js with Express.</p>

<p>We need several npm packages first of all:</p>

<ol>
<li><a href="https://github.com/webpack/webpack">webpack</a> for maintaining stuff</li>
<li><a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a></li>
<li><a href="https://github.com/remy/nodemon">nodemon</a></li>
<li><a href="https://github.com/auchenberg/express-webpack-asset">express-webpack-assets</a></li>
</ol>


<p>Install all this packeges:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install webpack --save
</span><span class='line'>$ npm install webpack-dev-middleware --save-dev
</span><span class='line'>$ npm install express-webpack-assets --save
</span><span class='line'>$ sudo npm install nodemon -g</span></code></pre></td></tr></table></div></figure>


<p>Then create in project root <code>webpack.conf.js</code>. This file will contain webpack configuration.</p>

<figure class='code'><figcaption><span>webpack.conf.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">bower_dir</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/bower_components&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpack&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// for fingerprinting</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SaveHashes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;assets-webpack-plugin&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">context</span><span class="o">:</span> <span class="nx">__dirname</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">cache</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">main</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;./assets/javascripts/main&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">vendors</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;react&#39;</span><span class="p">,</span> <span class="s1">&#39;lodash&#39;</span><span class="p">,</span> <span class="s1">&#39;normalize.css&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// absolute path where our asset will be situated in application</span>
</span><span class='line'>    <span class="nx">path</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;public/dist&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// for fingerprinting</span>
</span><span class='line'>    <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;[name]-[chunkhash].js&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// relative url where our assets will be situated</span>
</span><span class='line'>    <span class="nx">publicPath</span><span class="o">:</span> <span class="s1">&#39;/dist/&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">pathinfo</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;.js&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">root</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s2">&quot;bower_components&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s2">&quot;node_modules&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">noParse</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">preLoaders</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>      <span class="nx">test</span><span class="o">:</span> <span class="s1">&#39;\\.js$&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">exclude</span><span class="o">:</span> <span class="s1">&#39;node_modules&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;jshint&#39;</span>
</span><span class='line'>    <span class="p">}],</span>
</span><span class='line'>    <span class="nx">loaders</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.js$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;react-hot!jsx-loader?harmony&#39;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.sass$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;style-loader!css-loader!sass-loader?indentedSyntax=sass&amp;outputStyle=expanded&amp;&#39;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.css$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;style-loader!css-loader&#39;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.(png|jpg)$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;url-loader?limit=8192&amp;name=[name].[ext]&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ResolverPlugin</span><span class="p">(</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ResolverPlugin</span><span class="p">.</span><span class="nx">DirectoryDescriptionFilePlugin</span><span class="p">(</span><span class="s2">&quot;bower.json&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;main&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">(),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">DedupePlugin</span><span class="p">(),</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// for fingerprinting and building optimizations</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">(</span><span class="s1">&#39;vendors&#39;</span><span class="p">,</span> <span class="s1">&#39;vendors-[chunkhash].js&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">new</span> <span class="nx">SaveHashes</span><span class="p">({</span><span class="nx">path</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;config&#39;</span><span class="p">)})</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create <code>nodemon.json</code>. This file will contain nodemon configration.</p>

<figure class='code'><figcaption><span>nodemon.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;execMap&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;js&quot;</span><span class="o">:</span> <span class="s2">&quot;./bin/www&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;env&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;NODE_ENV&quot;</span><span class="o">:</span> <span class="s2">&quot;development&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;ext&quot;</span><span class="o">:</span> <span class="s2">&quot;js json&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;ignore&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;assets&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;config/webpack-assets.json&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we will setup our Express application</p>

<figure class='code'><figcaption><span>fingerprinting support</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">webpackAssets</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express-webpack-assets&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">webpackAssets</span><span class="p">(</span><span class="s1">&#39;./config/webpack-assets.json&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>webpack dev middleware support</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">webpackDevMiddleware</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;webpack-dev-middleware&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpack&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./dev.webpack.config.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">compiler</span> <span class="o">=</span> <span class="nx">webpack</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">webpackDevMiddleware</span><span class="p">(</span><span class="nx">compiler</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">publicPath</span><span class="o">:</span> <span class="s1">&#39;/dist/&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">stats</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">colors</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Put the following into layout.jade</p>

<figure class='code'><figcaption><span>layout.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">doctype</span> html
</span><span class='line'><span class="nt">html</span>
</span><span class='line'>  <span class="nt">head</span>
</span><span class='line'>    <span class="nt">meta</span>(<span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span>)
</span><span class='line'>    <span class="nt">title</span><span class="p">=</span> <span class="n">title</span>
</span><span class='line'>    <span class="nt">script</span>(<span class="na">src=</span><span class="s">&quot;#{webpack_asset(&#39;vendors&#39;)}&quot;</span>)
</span><span class='line'>
</span><span class='line'>  <span class="nt">body</span>
</span><span class='line'>    <span class="nt">block</span> content
</span><span class='line'>
</span><span class='line'>    <span class="nt">script</span>(<span class="na">src=</span><span class="s">&quot;/socket.io/socket.io.js&quot;</span>)
</span><span class='line'>    <span class="nt">script</span>(<span class="na">src=</span><span class="s">&quot;#{webpack_asset(&#39;main&#39;)}&quot;</span>)
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как работают JOIN в реляционных СУБД]]></title>
    <link href="http://yoihito.github.io/blog/2015/02/12/how-do-joins-is-implemented-in-rdbmses-and-in-postgresql-particularly/"/>
    <updated>2015-02-12T16:18:55+03:00</updated>
    <id>http://yoihito.github.io/blog/2015/02/12/how-do-joins-is-implemented-in-rdbmses-and-in-postgresql-particularly</id>
    <content type="html"><![CDATA[<h2>Вступление</h2>

<p>Все знают что в реляционных СУБД можно соединять таблицы в одну большую таблицу с помощью JOIN.
Потом эту таблицу можно использовать для сложных запросов к базе. Все мы пользуемся этой операцией, но мало кто знает как она реализована.
Было решено развеять тайну над этим вопросом.</p>

<h2>Загадочная история JOIN-a Баттона</h2>

<p>Оказывается за командой join скрывается несколько различных методов. Каждый из них выбирается планировщиком на этап построения запроса.
Всего таких методов 3:</p>

<ul>
<li>Merge join</li>
<li>Hash join</li>
<li>Nested loop</li>
</ul>


<!--more-->


<h3>Merge join</h3>

<p>Сначала сортируются все записи по значениям колонок которые будут объединяться. Затем проходом по обеим таблицам совпадающие записи объединяются.
Метод хорошо тем, что проход по всем записями осуществляется один раз.
Вот такой пример с сайта <a href="http://use-the-index-luke.com.">http://use-the-index-luke.com.</a></p>

<p><img src="http://use-the-index-luke.com/img/sort-merge.asvg" alt="Merge join" /></p>

<h3>Hash join</h3>

<p>Первая таблица записывается в хэш-таблицу с ключем в виде атрибута по которому будут объединяться обе таблицы.
Затем проходом по второй таблице значения из неё сопостовляются со значениями из хэш-таблицы.</p>

<h3>Nested loop</h3>

<p>Каждому значению из первой таблицы, сопоставляется значение из второй таблицы. Если они равны то объединяются. Очень проста в реализации, но очень затратная метод.</p>

<h2>Заключение</h2>

<p>Таким образом мы выяснили каким образом реализован JOIN в реляционных СУБД.
Самый быстрый и оптимальный это Merge join
За ним следует Hash join, он хорош в случае когда одна из таблиц имеет мало записей.
И черепашка Nested loop, основанный на простом проходе циклами по таблицам и сравнении ключей.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgresql: Architecture]]></title>
    <link href="http://yoihito.github.io/blog/2015/02/10/postgresql-architecture/"/>
    <updated>2015-02-10T23:55:49+03:00</updated>
    <id>http://yoihito.github.io/blog/2015/02/10/postgresql-architecture</id>
    <content type="html"><![CDATA[<h2>Вступление</h2>

<p>Решил познать дзен postgresql, собственно это описание моего пути познания дзена. Возможно разобью его на несколько частей если будет очень длинным.</p>

<h2>Начальная информация</h2>

<p>Запуск Postgresql начинается с <code>main(int argc, char *argv[])</code> в файле <em>backend/main/main.c</em></p>

<ol>
<li><p><code>get_progname(const char \*argv0)</code> <br/>
Получаем имя запущенного процесса.</p></li>
<li><p><code>startup_hacks(progname)</code></p></li>
<li><p><code>save_ps_display_args(argc,argv)</code> <br/>
Сохраняем переданные аргументы.</p></li>
<li><p><code>MemoryContextInit(void)</code><br/>
B этой функции инициализируется контекст для работы с памятью.<br/>
<a href="http://blog.pgaddict.com/posts/introduction-to-memory-contexts">Introduction to memory contexts</a></p></li>
<li><p>Потом загружаются локали<br/>
Есть дефайн EXEC_BACKEND, он объявляется в системах, которые не поддерживают форки процессов <code>fork()</code>.<br/>
<em>В общем для винды там полно костылей всяких разных, например там еще реализуется своя система сигналов для процессов</em>.</p></li>
<li><p>Далее определяется по параметрам запуска процесса, что это за процесс и что дальше вызывать
 Есть 4 различных метода:</p>

<ul>
<li><p><code>void AuxiliaryProcessMain(int argc, char *argv[])</code> <br/>
В этой функции создаются все вспомогательные процессы. <br/>
<em>bgwriter, walwriter, walreceiver, bootstrapper and the shared memory checker code.</em></p></li>
<li><p><code>void GucInfoMain(void)</code> <br/>
Выводит текущую конфигурационную информацию</p></li>
<li><p><code>void PostgresMain(int argc, char *argv[], const char *dbname, const char *username)</code><br/>
постгрес запускается в single user mode</p></li>
<li><p><code>void PostmasterMain(int argc, char *argv[])</code><br/>
Эта функция создает мастер процесс. Он управляет всеми остальными процессами.
Внутри:</p>

<ol>
<li> Выделяется контекст памяти для мастера.</li>
<li> Описываются правила работы с unix сигналами.</li>
<li> Считываются и устанавливаются настройки(настройки командной строки имеют больший приоритет)</li>
<li> Инициализируются сокеты для работы с подключениями.</li>
<li> Запускается главный цикл(<code>ServerLoop()</code>), который слушает порты и создает новый процесс при подключении клиента.
 Еще в <code>ServerLoop()</code> осуществляется проверка состояния всей системы, работают ли BgWriter, WalWriter и т.п.</li>
</ol>
</li>
</ul>
</li>
</ol>


<p>Создание нового процесса и обработка клиентского соединения осуществляется в <code>BackendStartup(Port *port)</code>.
Port это здоровенная струтура описанная в файле <code>src/include/libpq/libpq-be.h</code> на 123 строке.
Для понимания работы главного цикла сервера и как он принимает подключения надо понимать как работают <code>fork()</code> и <code>select()</code>, о них почитать на <a href="http://linux.die.net">Linux docs</a></p>
]]></content>
  </entry>
  
</feed>
